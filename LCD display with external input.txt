//LCD display with external input operation
//design code
module lcd_display(
    clk, 
    start_display,
    lcd_rs, 
    lcd_rw, 
    lcd_e, 
    lcd_4, 
    lcd_5, 
    lcd_6, 
    lcd_7
);
    parameter n = 27;
    parameter k = 19; // Increased k to introduce more delay
    input clk; // synthesis attribute PERIOD clk "100.0 MHz"
    input start_display;
    
    reg [n-1:0] count = 0;
    reg lcd_busy = 1;
    reg lcd_stb;
    reg [5:0] lcd_code;
    reg [6:0] lcd_stuff;
    reg [4:0] shift_count = 0;
    reg [5:0] lcd_data [0:28];
    reg start_latch = 0; // Latch to hold start signal state

    output reg lcd_rs;
    output reg lcd_rw;
    output reg lcd_7;
    output reg lcd_6;
    output reg lcd_5;
    output reg lcd_4;
    output reg lcd_e;
    
    initial begin
        // Initializing lcd_data with commands and data to display
        lcd_data[0] = 6'b000010; // function set
        lcd_data[1] = 6'b000010;
        lcd_data[2] = 6'b001100;
        lcd_data[3] = 6'b000000; // display on/off control
        lcd_data[4] = 6'b001100;
        lcd_data[5] = 6'b000000; // display clear
        lcd_data[6] = 6'b000001;
        lcd_data[7] = 6'b000000; // entry mode set
        lcd_data[8] = 6'b000110;
        lcd_data[9] = 6'h23; // 1
        lcd_data[10] = 6'h20;
        lcd_data[11] = 6'h23; // 1
        lcd_data[12] = 6'h21;
        lcd_data[13] = 6'h23; // 2
        lcd_data[14] = 6'h22;
        lcd_data[15] = 6'h23; // 3
        lcd_data[16] = 6'h23;
        lcd_data[17] = 6'h23; // 4
        lcd_data[18] = 6'h24;
        lcd_data[19] = 6'h23; // 5
        lcd_data[20] = 6'h25;
        lcd_data[21] = 6'h23; // 6
        lcd_data[22] = 6'h26;
        lcd_data[23] = 6'h23; // 7
        lcd_data[24] = 6'h27;
        lcd_data[25] = 6'h23; // 8
        lcd_data[26] = 6'h28;
        lcd_data[27] = 6'h23; // 9
        lcd_data[28] = 6'h29;
    end

    always @ (posedge clk) begin
        if (start_display) begin
            start_latch <= 1;
        end

        if (start_latch) begin
            count <= count + 1;

            if (count[k+7:k+2] < 9) begin
                lcd_code <= lcd_data[count[k+7:k+2]];
            end else begin
                // Shift data for displaying numbers 1-9 with shifting effect
                lcd_code <= lcd_data[(count[k+7:k+2] - 9 + shift_count) % 29];
            end

            if (count[k+7:k+2] == 28) begin
                shift_count <= shift_count + 1;
            end

            if (lcd_rw) lcd_busy <= 0;

            lcd_stb <= ^count[k+1:k+0] & ~lcd_rw & lcd_busy; // clkrate / 2^(k+2)
            lcd_stuff <= {lcd_stb, lcd_code};
            {lcd_e, lcd_rs, lcd_rw, lcd_7, lcd_6, lcd_5, lcd_4} <= lcd_stuff;
        end
    end
endmodule

//xdc code
#Sch name = lcd_rs
set_property PACKAGE_PIN L17 [get_ports {lcd_rs}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {lcd_rs}]
#Sch name = JC8
set_property PACKAGE_PIN M19 [get_ports {lcd_rw}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {lcd_rw}]
#Sch name = JC9
set_property PACKAGE_PIN P17 [get_ports {lcd_e}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {lcd_e}]

#Sch name = JB7
set_property PACKAGE_PIN A15 [get_ports {lcd_4}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {lcd_4}]
#Sch name = JB8
set_property PACKAGE_PIN A17 [get_ports {lcd_5}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {lcd_5}]
#Sch name = JB9
set_property PACKAGE_PIN C15 [get_ports {lcd_6}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {lcd_6}]
#Sch name = JB10 
set_property PACKAGE_PIN C16 [get_ports {lcd_7}]					
	set_property IOSTANDARD LVCMOS33 [get_ports {lcd_7}]

set_property PACKAGE_PIN W5 [get_ports clk]							
	set_property IOSTANDARD LVCMOS33 [get_ports clk]
	create_clock -add -name sys_clk_pin -period 10.00 -waveform {0 5} [get_ports clk]

set_property PACKAGE_PIN U18 [get_ports start_display]						
	set_property IOSTANDARD LVCMOS33 [get_ports start_display]
